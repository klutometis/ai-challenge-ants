# -*- org -*-
* TODO compilation

  #+BEGIN_SRC sh
    org-tangle TODO && chicken-scheme -purge && cd /tmp/tools && ./playgame.py --engine_seed 42 --player_seed 42 --food none --end_wait=0.25 --verbose --log_dir game_logs --turns 30 --map_file submission_test/test.map ~/prg/scm/ai-challenge/stdin-bot.scm "python submission_test/TestBot.py" -e --nolaunch --strict --capture_errors
  #+END_SRC

  #+BEGIN_SRC sh
    org-tangle TODO && chicken-scheme -purge && cd /tmp/tools && ./playgame.py --nolaunch -I -O -E --engine_seed 42 --player_seed 42 --end_wait=0.25 --log_dir game_logs --turns 1000 --map_file maps/symmetric_maps/symmetric_10.map ~/prg/scm/ai-challenge/stdin-bot.scm ~/prg/scm/ai-challenge/stdin-bot.scm ~/prg/scm/ai-challenge/stdin-bot.scm ~/prg/scm/ai-challenge/stdin-bot.scm; for i in /tmp/tools/game_logs/*bot0.*; do echo $i; cat -n $i; done
  #+END_SRC
* TODO same problem: how to submit to contests which take c?
  either we upload some architecture-dependent binaries/libraries, or
  use something like chibi.

  chibi sucks, though: it's slow and segfaults last time I used it on
  the facebook puzzles.
* TODO bot with chibi

  #+BEGIN_SRC sh :tangle chibi-scheme :shebang #!/usr/bin/env bash
    cd $(dirname $0)
    LD_LIBRARY_PATH=./srclib/chibi-scheme \
        CHIBI_MODULE_PATH=./srclib/chibi-scheme/lib \
        ./srclib/chibi-scheme/chibi-scheme "${@}"
    
  #+END_SRC

  #+BEGIN_SRC makefile :tangle chibi-bot.mk :shebang #!/usr/bin/unexpand -t 4
    .PHONY: chibi
    
    chibi:
        $(MAKE) -C srclib/chibi-scheme
    
  #+END_SRC


  #+BEGIN_SRC scheme :tangle chibi-bot.scm :shebang #!/home/pcdanenb/prg/scm/ai-challenge/chibi-scheme
    (import (srfi 1)
            (srfi 18)
            (chibi match)
            (chibi io))
    
    (load "srclib/irregex-0.8.1/irregex.scm")
    
    ;;; Approximately like srfi-13
    (define (string-tokenize string)
      (irregex-extract '(: (+ graphic)) string))
    
    (define (parse-parameters)
      (let next-parameter ((parameter (read-line))
                           (parameters '()))
        (if (eof-object? parameter)
            parameters
            (match (string-tokenize parameter)
              (("ready")
               (begin
                 (write-line "go")
                 parameters))
              ((key value)
               (next-parameter (read-line)
                               (alist-cons (string->symbol key)
                                           (string->number value)
                                           parameters)))))))
    
    (write-line (parse-parameters) (current-error-port))
    ;; (let loop ()
    ;;   (write-line "go")
    ;;   (loop))
    ;; (display (read-line) (current-error-port))
    (write-line "MEIN GOTT FULL OF STARS" (current-error-port))
    #;
    (thread-start!
     (make-thread
      (lambda ()
        (write-line "go"))))
    (let loop ()
      (write-line "go")
      (flush-output)
      (write-line (read-line) (current-error-port))
      (loop))
  #+END_SRC
* TODO stdin-bot

  #+BEGIN_SRC scheme :tangle stdin-bot.scm :shebang #!/usr/local/bin/csi -s
    (use matchable
         srfi-13
         srfi-1
         debug
         ports
         srfi-39
         syslog
         irregex
         srfi-18)
    
    (define (parse-parameters)
      (let next-parameter ((parameter (read-line))
                           (parameters '()))
        (match (string-tokenize parameter)
          (("ready")
           (begin
             (write-line "go")
             parameters))
          ((key value)
           (next-parameter (read-line)
                           (alist-cons (string->symbol key)
                                       (string->number value)
                                       parameters))))))
    
    (debug (parse-parameters))
    
    (let loop ()
      (begin
        (write-line "go")
        (loop)))
    
  #+END_SRC
