# -*- org -*-
* TODO Compilation
  #+BEGIN_SRC sh
    org-tangle TODO && \
        chicken-scheme -purge && \
        cd /tmp/tools && \
        ./playgame.py \
          --engine_seed 42 \
          --player_seed 42 \
          --food none \
          --end_wait=0.25 \
          --verbose \
          --log_dir game_logs \
          --turns 30 \
          --map_file submission_test/test.map \
          ~/prg/scm/ai-challenge/stdin-bot.scm \
          "python submission_test/TestBot.py" \
          -e \
          --nolaunch \
          --strict \
          --capture_errors
  #+END_SRC

  #+BEGIN_SRC sh
    org-tangle TODO && \
        chicken-scheme -purge && \
        cd /tmp/tools && \
        ./playgame.py \
          --nolaunch \
          -I \
          -O \
          -E \
          --engine_seed 42 \
          --player_seed 42 \
          --end_wait=0.25 \
          --log_dir game_logs \
          --turns 1000 \
          --map_file maps/symmetric_maps/symmetric_10.map \
          ~/prg/scm/ai-challenge/stdin-bot.scm \
          ~/prg/scm/ai-challenge/stdin-bot.scm \
          ~/prg/scm/ai-challenge/stdin-bot.scm \
          ~/prg/scm/ai-challenge/stdin-bot.scm
    
    for i in /tmp/tools/game_logs/*bot0.*; do echo $i; cat -n $i; done
    
  #+END_SRC
* TODO Same problem: how to submit to contests which take C?
  Either we upload some architecture-dependent binaries/libraries, or
  use something like chibi.

  Chibi sucks, though: it's slow and segfaults last time I used it on
  the facebook puzzles.

  According to foof, though:

  #+BEGIN_EXAMPLE
  21:41 < klutometis> I love Chibi; but ran into segfaults and
    performance issues last time I tried to use it with the Facebook
    puzzles (six to eight months ago).
  22:29 < foof> klutometis: segfaults will be significantly more rare in
    0.4
  22:31 < foof> performance is the same :)
  22:33 < klutometis> foof: Oh, nice; it's in the running, then. I
    figure I can drop down into C for performance-sensitive loops.
  22:51 < foof> If you do find a segfault, please file a bug report.
  #+END_EXAMPLE
* TODO Running chibi
  We need to clean up the chibi execution mechanism; even if we
  compile a thin wrapper around the repl, we still have to specify
  library paths, don't we?

  The bash-script-with-cd-thing bugs me; is it the best we can do?

  Take a look at [[http://synthcode.com/scheme/chibi/#h1_Installation][this]], though; we can build a static executable
  (though we probably still have to specify the =CHIBI_MODULE_PATH=
  with reference to the script dir, though):

  #+BEGIN_QUOTE
  The "chibi-scheme-static" make target builds an equivalent static
  executable.

  To compile a static executable, use 

  #+BEGIN_EXAMPLE
  make chibi-scheme-static SEXP_USE_DL=0
  #+END_EXAMPLE

  To compile a static executable with all C libraries statically
  included, first you need to create a clibs.c file, which can be done
  with: 

  #+BEGIN_EXAMPLE
  make clibs.c
  #+END_EXAMPLE

  or edited manually. Be sure to run this with a non-static
  chibi-scheme. Then you can make the static executable with: 

  #+BEGIN_EXAMPLE
  make -B chibi-scheme-static SEXP_USE_DL=0
  CPPFLAGS=-DSEXP_USE_STATIC_LIBS
  #+END_EXAMPLE
  #+END_QUOTE
* TODO Bot with chibi
  #+BEGIN_SRC sh :tangle chibi-scheme :shebang #!/usr/bin/env bash
    scriptdir=$(dirname $0)
    LD_LIBRARY_PATH="${scriptdir}/srclib/chibi-scheme" \
        CHIBI_MODULE_PATH="${scriptdir}/srclib/chibi-scheme/lib" \
        "${scriptdir}/srclib/chibi-scheme/chibi-scheme" "${@}"
    
  #+END_SRC

  #+BEGIN_SRC makefile :tangle chibi-bot.mk :shebang #!/usr/bin/unexpand -t 4
    .PHONY: chibi
    
    chibi:
        $(MAKE) -C srclib/chibi-scheme
    
  #+END_SRC


  #+BEGIN_SRC scheme :tangle chibi-bot.scm :shebang #!/home/pcdanenb/prg/scm/ai-challenge/chibi-scheme
    (import (srfi 1)
            (srfi 18)
            (chibi match)
            (chibi io))
    
    (load "srclib/irregex-0.8.1/irregex.scm")
    
    ;;; Approximately like srfi-13
    (define (string-tokenize string)
      (irregex-extract '(: (+ graphic)) string))
    
    (define (parse-parameters)
      (let next-parameter ((parameter (read-line))
                           (parameters '()))
        (if (eof-object? parameter)
            parameters
            (match (string-tokenize parameter)
              (("ready")
               (begin
                 (write-line "go")
                 parameters))
              ((key value)
               (next-parameter (read-line)
                               (alist-cons (string->symbol key)
                                           (string->number value)
                                           parameters)))))))
    
    (write-line (parse-parameters) (current-error-port))
    
    (let loop ()
      (write-line "go")
      (flush-output)
      (write-line (read-line) (current-error-port))
      (loop))
  #+END_SRC

  Basic idea with the game loop (according to the [[https://github.com/aichallenge/aichallenge/wiki/Ants-Starter-Pack-Guide][wiki]]):


  #+BEGIN_QUOTE
  Read and cache bot input until a 'ready', 'go', or 'end' is
  received, then call the update function. The Update, Issue Order and
  Finish Turn functions can be rolled into the game loop if clearly
  commented, unless the game loop is part of the starter bot logic.
  #+END_QUOTE
  
  These are guidelines for the starter packs.
* TODO Bot with Chicken

  #+BEGIN_SRC scheme :tangle stdin-bot.scm :shebang #!/usr/local/bin/csi -s
    (use matchable
         srfi-13
         srfi-1
         debug
         ports
         srfi-39
         syslog
         irregex
         srfi-18)
    
    (define (parse-parameters)
      (let next-parameter ((parameter (read-line))
                           (parameters '()))
        (match (string-tokenize parameter)
          (("ready")
           (begin
             (write-line "go")
             parameters))
          ((key value)
           (next-parameter (read-line)
                           (alist-cons (string->symbol key)
                                       (string->number value)
                                       parameters))))))
    
    (debug (parse-parameters))
    
    (let loop ()
      (begin
        (write-line "go")
        (flush-output)
        (debug (read-line))
        (loop)))
    
  #+END_SRC
